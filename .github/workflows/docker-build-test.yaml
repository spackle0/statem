name: CI Pipeline

on:
  push:
    branches:
      - main          # When code is pushed/merged into main
      - 'ST-**'       # When code is pushed to feature branches matching 'ST-**'
  workflow_dispatch:
  release:
    types: [published, unpublished, created, edited, deleted]

permissions:
  contents: read
  packages: write
  actions: read
  pull-requests: write # Required for Dependabot

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          # cache: 'pip'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Log in to GitHub Container Registry
        # Skip registry login for Dependabot PRs as they can't access secrets
        if: github.actor != 'dependabot[bot]'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/status-tiles-test
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=long
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}

      - name: Build test image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: testing
          # Only push if not Dependabot
          push: ${{ github.actor != 'dependabot[bot]' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=registry,ref=ghcr.io/${{ github.repository }}/status-tiles-test:cache
            type=gha,scope=${{ github.workflow }}
          cache-to: |
            type=registry,ref=ghcr.io/${{ github.repository }}/status-tiles-test:cache,mode=max
            type=gha,scope=${{ github.workflow }},mode=max

      - name: Run tests and generate coverage report
        env:
          COVERAGE: 50
          IMAGE_TAG: ${{ steps.meta.outputs.tags }}
        run: |
          # Extract the first image tag
          IMAGE=$(echo "${IMAGE_TAG}" | cut -d',' -f1)
          echo "Using Docker image: $IMAGE"

          # Run tests and save coverage report to host
          echo "Running tests and saving coverage report..."
          docker run --rm \
            -e COVERAGE=${{ env.COVERAGE }} \
            -e PYTHONPATH=/app \
            -v ${{ github.workspace }}/coverage_html_report:/app/coverage_html_report \
            $IMAGE

      - name: Verify coverage report
        run: |
          echo "Checking generated coverage report..."
          ls -l coverage_html_report
          tar -czf coverage-html.tar.gz coverage_html_report

      - name: Upload coverage report
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage-html.tar.gz
          compression-level: 9
          retention-days: 7

#       - name: Upload coverage to Codecov
#         if: success()
#         uses: codecov/codecov-action@v3
#         with:
#           files: ./coverage_html_report/coverage.xml
#           fail_ci_if_error: true

      # Auto-merge Dependabot PRs for minor/patch updates if tests pass
      - name: Auto-merge Dependabot PR
        if: success() && github.actor == 'dependabot[bot]'
        run: |
          gh pr merge --auto --merge "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk to check for vulnerabilities
        if: github.actor != 'dependabot[bot]'
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
